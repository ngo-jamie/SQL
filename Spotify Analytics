#In this project, I downloaded Spotify data from Kaggle.
#Then I created a table to insert Spotify data into.
#Finally, I performed an analysis on the data using SQL.

#To create the table:
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL )

#Next, I inserted the Spotify Data .csv into the table.
#I then explored the data using the following SQL.

#First, I determined the avg popularity, danceability, and energy by artist and track.
SELECT artist_name
,track_name
,AVG(popularity)
,AVG(danceability)
,AVG(energy)
FROM BIT_DB.Spotifydata
GROUP BY artist_name, track_name;

#Next, I determined who the Top 10 artists are by popularity so people can explore their other tracks.
SELECT artist_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC
LIMIT 10;

#I also determined the popularity of tracks from lowest to highest, which can influence the listeners' song choices.
SELECT track_name, popularity
FROM BIT_DB.Spotifydata
ORDER by popularity ASC;

#Then, I determined which artists appeared more than once to show their influence within the music industry.
SELECT artist_name, COUNT(track_name) AS total_tracks
FROM BIT_DB.Spotifydata
GROUP BY artist_name
HAVING total_tracks > 1
ORDER BY total_tracks DESC;

#I also determined the top 5 most danceable songs for those who want to dance, or have an upcoming party.
SELECT track_name, danceability
FROM BIT_DB.Spotifydata
ORDER BY danceability DESC
LIMIT 5;

#For an extra boost of serotonin, I determined which songs have high energy and valence.
SELECT track_name, energy, valence
FROM BIT_DB.Spotifydata
WHERE energy >= 0.700 AND valence >= 0.700;

#I also determined which artist had the longest song in the database.
SELECT artist_name, track_name, MAX(duration_ms) AS longest_song_ms
FROM BIT_DB.Spotifydata
ORDER BY longest_song_ms;

#To sum it all up, I labeled the songs based on their popularity as "Top Hit", "Popular", and "Pretty Good".
SELECT track_name, popularity,
CASE
    WHEN popularity >= 90 THEN 'Top Hit'
    WHEN popularity >= 75 THEN 'Popular'
    ELSE 'Pretty Good'
END AS Top_50
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC;

#Calculating the average popularity for artists.
WITH popularity_average_CTE AS (
SELECT s.artist_name,
AVG(s.popularity) AS average_popularity
FROM SpotifyData s
GROUP BY s.artist_name
)
SELECT artist_name
,average_popularity
,'Top Star' AS tag
FROM popularity_average_CTE
WHERE average_popularity >= 90;
